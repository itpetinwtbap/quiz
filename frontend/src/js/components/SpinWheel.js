class SpinWheel {
    constructor(container, gameManager) {
        console.log('üé∞ SpinWheel constructor called!', container);
        this.container = container;
        this.gameManager = gameManager;
        this.segments = 12;
        this.selectedQuestion = null;
        this.isSpinning = false;
        this.isCompleted = false;
        
        this.setupWheel();
    }

    setupWheel() {
        console.log('üîß setupWheel() called, container:', this.container);
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.container.innerHTML = '';
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–ª–µ—Å–∞
        const wheelContainer = document.createElement('div');
        wheelContainer.className = 'wheel-container';
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–µ—Å–æ
        const wheel = document.createElement('ul');
        wheel.className = 'wheel';
        wheel.id = 'wheel';
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
        for (let i = 0; i < this.segments; i++) {
            const segment = document.createElement('li');
            segment.className = `segment position-${i + 1}-${this.segments}`;
            segment.textContent = (i + 1).toString();
            wheel.appendChild(segment);
        }
        
        // –°–æ–∑–¥–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å
        const pointer = document.createElement('div');
        pointer.className = 'wheel-pointer';
        pointer.innerHTML = '‚ñº';
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–ø–∏–Ω–∞
        const spinButton = document.createElement('button');
        spinButton.className = 'spin-button';
        spinButton.textContent = '–ö–†–£–¢–ò–¢–¨';
        spinButton.addEventListener('click', () => this.spin());
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const confirmationContainer = document.createElement('div');
        confirmationContainer.className = 'confirmation-container';
        confirmationContainer.style.display = 'none';
        
        const acceptButton = document.createElement('button');
        acceptButton.className = 'confirmation-button accept-button';
        acceptButton.textContent = '–ü–†–ò–ù–Ø–¢–¨';
        acceptButton.addEventListener('click', () => this.acceptQuestion());
        
        const rerollButton = document.createElement('button');
        rerollButton.className = 'confirmation-button reroll-button';
        rerollButton.textContent = '–ü–ï–†–ï–ö–†–£–¢–ò–¢–¨';
        rerollButton.addEventListener('click', () => this.rerollQuestion());
        
        confirmationContainer.appendChild(acceptButton);
        confirmationContainer.appendChild(rerollButton);
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
        wheelContainer.appendChild(wheel);
        wheelContainer.appendChild(pointer);
        wheelContainer.appendChild(spinButton);
        wheelContainer.appendChild(confirmationContainer);
        
        this.container.appendChild(wheelContainer);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        this.addWheelStyles();
        
        console.log('‚úÖ Wheel initialized successfully');
    }

    addWheelStyles() {
        if (document.getElementById('wheel-styles')) return;
        
        const style = document.createElement('style');
        style.id = 'wheel-styles';
        style.textContent = `
            .wheel-container {
                position: relative;
                width: 350px;
                height: 350px;
                margin: 10px auto;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .wheel {
                list-style: none;
                position: relative;
                transform-origin: center;
                width: 300px;
                height: 300px;
                border-radius: 50%;
                border: 4px solid #8B4513;
                background: conic-gradient(
                    #ff6b6b 0deg 30deg,
                    #4ecdc4 30deg 60deg,
                    #45b7d1 60deg 90deg,
                    #96ceb4 90deg 120deg,
                    #ffeaa7 120deg 150deg,
                    #dda0dd 150deg 180deg,
                    #98d8c8 180deg 210deg,
                    #f7dc6f 210deg 240deg,
                    #bb8fce 240deg 270deg,
                    #85c1e9 270deg 300deg,
                    #f8c471 300deg 330deg,
                    #82e0aa 330deg 360deg
                );
                transition: transform 4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            }

            .wheel.rotate {
                animation: spin 4s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
            }

            @keyframes spin {
                100% {
                    transform: rotate(var(--rotate-angle));
                }
            }

            .segment {
                position: absolute;
                width: 60px;
                height: 60px;
                display: flex;
                align-items: center;
                justify-content: center;
                font-weight: bold;
                font-size: 20px;
                color: white;
                text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
                border-radius: 50%;
                background: rgba(255, 255, 255, 0.15);
                backdrop-filter: blur(2px);
                border: 2px solid rgba(255, 255, 255, 0.3);
                /* –í–ê–ñ–ù–û: —Å–µ–≥–º–µ–Ω—Ç—ã –∫—Ä—É—Ç—è—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –∫–æ–ª–µ—Å–æ–º! */
                transform-origin: center;
            }

            /* –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è 12 —Å–µ–≥–º–µ–Ω—Ç–æ–≤ - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –∫–æ–ª–µ—Å–∞ */
            .position-1-12 { transform: translate(0px, -120px); }
            .position-2-12 { transform: translate(60px, -104px); }
            .position-3-12 { transform: translate(104px, -60px); }
            .position-4-12 { transform: translate(120px, 0px); }
            .position-5-12 { transform: translate(104px, 60px); }
            .position-6-12 { transform: translate(60px, 104px); }
            .position-7-12 { transform: translate(0px, 120px); }
            .position-8-12 { transform: translate(-60px, 104px); }
            .position-9-12 { transform: translate(-104px, 60px); }
            .position-10-12 { transform: translate(-120px, 0px); }
            .position-11-12 { transform: translate(-104px, -60px); }
            .position-12-12 { transform: translate(-60px, -104px); }

            .wheel-pointer {
                position: absolute;
                top: -30px;
                left: 50%;
                transform: translateX(-50%);
                font-size: 40px;
                color: #ff0000;
                z-index: 10;
                text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.8);
                font-weight: bold;
            }

            .spin-button {
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: 80px;
                height: 80px;
                border-radius: 50%;
                border: 4px solid #fff;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                font-weight: bold;
                font-size: 12px;
                cursor: pointer;
                z-index: 5;
                transition: all 0.3s ease;
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            }

            .spin-button:hover {
                transform: translate(-50%, -50%) scale(1.1);
                box-shadow: 0 6px 20px rgba(0, 0, 0, 0.4);
            }

            .spin-button:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: translate(-50%, -50%) scale(1);
            }

            .confirmation-container {
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                display: flex;
                gap: 10px;
                z-index: 15;
            }

            .confirmation-button {
                padding: 12px 24px;
                border: none;
                border-radius: 8px;
                font-weight: bold;
                font-size: 14px;
                cursor: pointer;
                transition: all 0.3s ease;
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            }

            .accept-button {
                background: #4CAF50;
                color: white;
            }

            .accept-button:hover {
                background: #45a049;
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
            }

            .reroll-button {
                background: #f44336;
                color: white;
            }

            .reroll-button:hover {
                background: #da190b;
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(244, 67, 54, 0.4);
            }

            .segment.used {
                background: rgba(128, 128, 128, 0.8) !important;
                color: #ccc !important;
            }
        `;
        document.head.appendChild(style);
    }

    async spin() {
        if (this.isSpinning) {
            console.log('üé∞ Wheel is already spinning');
            return;
        }

        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        this.hideConfirmationButtons();

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        const gameState = this.gameManager.getGameState();
        const allQuestions = gameState.questions || [];
        const usedQuestions = gameState.usedQuestions || [];
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        const availableQuestions = allQuestions.filter(q => 
            !usedQuestions.includes(q.id.toString())
        );
        
        if (availableQuestions.length === 0) {
            this.showMessage('–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã!');
            return;
        }

        const randomQuestion = availableQuestions[Math.floor(Math.random() * availableQuestions.length)];
        const questionNumber = parseInt(randomQuestion.id);
        
        console.log('üé∞ Spinning wheel to question:', questionNumber);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —É–≥–ª–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞
        // –£–∫–∞–∑–∞—Ç–µ–ª—å —Å–≤–µ—Ä—Ö—É (12 —á–∞—Å–æ–≤), —Å–µ–≥–º–µ–Ω—Ç 1 —Ç–æ–∂–µ —Å–≤–µ—Ä—Ö—É
        // –ù—É–∂–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—å –∫–æ–ª–µ—Å–æ —Ç–∞–∫, —á—Ç–æ–±—ã –Ω—É–∂–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç –æ–∫–∞–∑–∞–ª—Å—è —Å–≤–µ—Ä—Ö—É –ø–æ–¥ —É–∫–∞–∑–∞—Ç–µ–ª–µ–º
        const segmentAngle = 360 / this.segments; // 30 –≥—Ä–∞–¥—É—Å–æ–≤ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç
        const targetAngle = (questionNumber - 1) * segmentAngle;
        
        // –î–æ–±–∞–≤–ª—è–µ–º 4 –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–∞ + —Ç–æ—á–Ω—ã–π —É–≥–æ–ª –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
        const totalRotation = 4 * 360 + targetAngle;
        
        console.log(`üéØ Target angle: ${targetAngle}¬∞, Total rotation: ${totalRotation}¬∞`);
        
        const wheel = this.container.querySelector('.wheel');
        wheel.style.setProperty('--rotate-angle', `${totalRotation}deg`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        this.isSpinning = true;
        wheel.classList.add('rotate');
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
        const spinButton = this.container.querySelector('.spin-button');
        spinButton.disabled = true;
        
        // –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            this.isSpinning = false;
            this.isCompleted = true;
            this.selectedQuestion = questionNumber;
            
            console.log('üéØ Spin completed, selected question:', this.selectedQuestion);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            this.showConfirmationButtons();
            
            // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–æ
            spinButton.disabled = false;
        }, 4000);
    }

    showConfirmationButtons() {
        const confirmationContainer = this.container.querySelector('.confirmation-container');
        if (confirmationContainer) {
            confirmationContainer.style.display = 'flex';
        }
    }

    hideConfirmationButtons() {
        const confirmationContainer = this.container.querySelector('.confirmation-container');
        if (confirmationContainer) {
            confirmationContainer.style.display = 'none';
        }
    }

    async acceptQuestion() {
        if (!this.selectedQuestion) {
            console.log('‚ùå No question selected');
            return;
        }

        console.log('üéØ ACCEPT QUESTION DEBUG:');
        console.log('  - Selected question from wheel:', this.selectedQuestion);

        // –í—ã–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å
        this.gameManager.selectQuestion(this.selectedQuestion);
        
        // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        this.gameManager.markQuestionAsUsed(this.selectedQuestion);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
        this.updateUsedSegments();
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤–æ–ø—Ä–æ—Å–∞
        this.switchToQuestionView();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        this.hideConfirmationButtons();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.isCompleted = false;
        this.selectedQuestion = null;
    }

    async rerollQuestion() {
        console.log('üîÑ Rerolling question');
        this.hideConfirmationButtons();
        this.isCompleted = false;
        this.selectedQuestion = null;
        
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å rotate –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º transform
        const wheel = this.container.querySelector('.wheel');
        wheel.classList.remove('rotate');
        wheel.style.transform = 'rotate(0deg)';
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏–Ω
        setTimeout(() => {
            this.spin();
        }, 100);
    }

    switchToQuestionView() {
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–ª–µ—Å–æ
        this.container.style.display = 'none';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤–æ–ø—Ä–æ—Å–∞
        const questionCard = document.getElementById('questionCard');
        if (questionCard) {
            questionCard.style.display = 'block';
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ–ª–µ—Å—É"
        const backToWheelBtn = document.getElementById('backToWheelBtn');
        if (backToWheelBtn) {
            backToWheelBtn.style.display = 'block';
        }
    }

    resetWheelState() {
        this.selectedQuestion = null;
        this.isSpinning = false;
        this.isCompleted = false;
        this.hideConfirmationButtons();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–µ—Å–æ —Å–Ω–æ–≤–∞
        this.container.style.display = 'block';
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤–æ–ø—Ä–æ—Å–∞
        const questionCard = document.getElementById('questionCard');
        if (questionCard) {
            questionCard.style.display = 'none';
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ–ª–µ—Å—É"
        const backToWheelBtn = document.getElementById('backToWheelBtn');
        if (backToWheelBtn) {
            backToWheelBtn.style.display = 'none';
        }
    }

    updateUsedSegments() {
        const gameState = this.gameManager.getGameState();
        const usedQuestions = gameState.usedQuestions || [];
        
        usedQuestions.forEach(questionId => {
            const segment = this.container.querySelector(`.position-${questionId}-${this.segments}`);
            if (segment) {
                segment.classList.add('used');
            }
        });
    }

    showMessage(message) {
        alert(message);
    }

    destroy() {
        this.container.innerHTML = '';
    }
}

export default SpinWheel;